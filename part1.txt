This is the second part of a multi-part series of blog posts on Micro-services.  There seems to be a lot of ambiguity amongst the community around what these things are, when they should be used and how to approach them.  This blog series is basically a regurgitation of 5 years of building and learning about micro-services.  I imagine that not everybody will agree with everything I say here, but I hope that there is nothing so controversial as to cause serious disagreements. 

1. What are Micro-services (aka Micro-service architecture)?

The concept of micro-services is relatively new (this is based only on the google search for the term).  It seems that the concept was coined by a colleague of mine, James Lewis.  It seems likely however, that people have been building software following this paradigm for quite a while, just haven't really put alot of thought into what it actually means.  It's not easy to define micro services however, but I'll give it my best shot. ** not true, need a bit better description here 

The first thing to cover is what micro-services are not.  Micro services are not 1 million services that make up a single service. (get it... micro = million... ha ha...?).  Micro-services are also not a single service that covers a bunch of functionality and interacts with other services within a large enterprise system.  Instead, the truth, I believe, lives somewhere in the middle.

Another thing that is important to recognise is that micro-services are not necessarily independently deployable.  Instead of focusing on the services being independently deployable, it is sufficient to choose groups of services that can be deployed independently.  James Lewis describes this as a city layout(1) and suggests that services that work together to provide a given piece or set of functionality should be independently deployable from other groups of services that provide a different piece or set of functionality.  Within the group of services that provide that piece or set of functionality do not need to be independently deployable. There are costs to deploying services independently(2) and the pragmatic mind avoids independently deployable services unless it provides real value. 

When I chatted with James Lewis and asked him, "What is a definition of Micro-services?" his response was "fine grained SOA architecture done UNIX way". That seems straightforward enough.  Essentially we're talking about well defined piece of functionality that communicates with other well defined pieces of functionality via a well defined interface.  The UNIX philosophy is to build things that do one thing, do it well and work together at a distance via pipes and filters.  Taking this philosophy and applying it to a SOA architecture would imply building services that focus on a single piece of functionality and communicate with other services to provide business value.  

Effectively, this is extending Bob Martin's Single Responsibility Principle(3) to a service level.  In practice, this is difficult to achieve, but in an 'ideal' world this means that a service only needs to change (and therefore be deployed) if the functionality it is responsible for changes.  Very noble, but also very difficult as breaking a system down to that level of granularity might make it a maintenance nightmare.

That communication should be over a well defined interface such as that provided by HTTP.  Fortunately there is a compelling SOA architecture that provides us with the ability to provide a well defined interface over HTTP.  REST has been floating around for a while and fits the purpose well.  While it's not possible to achieve quite the level of decoupling that the UNIX philosophy achieves, proper REST with hypermedia goes a long way to providing this decoupling.

There are other protocols that could function in this space, and I do not want to claim that REST is the only one that fits the pattern.  In many cases, other transfer protocols make more sense than HTTP.  For the purposes of this series, I am going to be using REST for my examples.

So, with that context, let's try to define micro-services, or a micro-service Architecture:

A system built using micro-services is a system that is built up of small, lightweight services, each performing a single function.  These services communicate with each other via a well defined interface and work together to provide business value.

(1) link to James' video
(2) API versioning, Hypermedia, etc
(3) link to Bob Martin's SOLID principles
